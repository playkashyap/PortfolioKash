{
  "version": 3,
  "sources": ["../../node_modules/rxjs/src/internal/ajax/getXHRResponse.ts", "../../node_modules/rxjs/src/internal/ajax/AjaxResponse.ts", "../../node_modules/rxjs/src/internal/ajax/errors.ts", "../../node_modules/rxjs/src/internal/ajax/ajax.ts"],
  "sourcesContent": ["/**\n * Gets what should be in the `response` property of the XHR. However,\n * since we still support the final versions of IE, we need to do a little\n * checking here to make sure that we get the right thing back. Consequently,\n * we need to do a JSON.parse() in here, which *could* throw if the response\n * isn't valid JSON.\n *\n * This is used both in creating an AjaxResponse, and in creating certain errors\n * that we throw, so we can give the user whatever was in the response property.\n *\n * @param xhr The XHR to examine the response of\n */\nexport function getXHRResponse(xhr: XMLHttpRequest) {\n  switch (xhr.responseType) {\n    case 'json': {\n      if ('response' in xhr) {\n        return xhr.response;\n      } else {\n        // IE\n        const ieXHR: any = xhr;\n        return JSON.parse(ieXHR.responseText);\n      }\n    }\n    case 'document':\n      return xhr.responseXML;\n    case 'text':\n    default: {\n      if ('response' in xhr) {\n        return xhr.response;\n      } else {\n        // IE\n        const ieXHR: any = xhr;\n        return ieXHR.responseText;\n      }\n    }\n  }\n}\n", "import { AjaxRequest, AjaxResponseType } from './types';\nimport { getXHRResponse } from './getXHRResponse';\n\n/**\n * A normalized response from an AJAX request. To get the data from the response,\n * you will want to read the `response` property.\n *\n * - DO NOT create instances of this class directly.\n * - DO NOT subclass this class.\n *\n * It is advised not to hold this object in memory, as it has a reference to\n * the original XHR used to make the request, as well as properties containing\n * request and response data.\n *\n * @see {@link ajax}\n * @see {@link AjaxConfig}\n */\nexport class AjaxResponse<T> {\n  /** The HTTP status code */\n  readonly status: number;\n\n  /**\n   * The response data, if any. Note that this will automatically be converted to the proper type\n   */\n  readonly response: T;\n\n  /**\n   * The responseType set on the request. (For example: `\"\"`, `\"arraybuffer\"`, `\"blob\"`, `\"document\"`, `\"json\"`, or `\"text\"`)\n   * @deprecated There isn't much reason to examine this. It's the same responseType set (or defaulted) on the ajax config.\n   * If you really need to examine this value, you can check it on the `request` or the `xhr`. Will be removed in v8.\n   */\n  readonly responseType: XMLHttpRequestResponseType;\n\n  /**\n   * The total number of bytes loaded so far. To be used with {@link total} while\n   * calculating progress. (You will want to set {@link includeDownloadProgress} or\n   * {@link includeDownloadProgress})\n   */\n  readonly loaded: number;\n\n  /**\n   * The total number of bytes to be loaded. To be used with {@link loaded} while\n   * calculating progress. (You will want to set {@link includeDownloadProgress} or\n   * {@link includeDownloadProgress})\n   */\n  readonly total: number;\n\n  /**\n   * A dictionary of the response headers.\n   */\n  readonly responseHeaders: Record<string, string>;\n\n  /**\n   * A normalized response from an AJAX request. To get the data from the response,\n   * you will want to read the `response` property.\n   *\n   * - DO NOT create instances of this class directly.\n   * - DO NOT subclass this class.\n   *\n   * @param originalEvent The original event object from the XHR `onload` event.\n   * @param xhr The `XMLHttpRequest` object used to make the request. This is useful for examining status code, etc.\n   * @param request The request settings used to make the HTTP request.\n   * @param type The type of the event emitted by the {@link ajax} Observable\n   */\n  constructor(\n    /**\n     * The original event object from the raw XHR event.\n     */\n    public readonly originalEvent: ProgressEvent,\n    /**\n     * The XMLHttpRequest object used to make the request.\n     * NOTE: It is advised not to hold this in memory, as it will retain references to all of it's event handlers\n     * and many other things related to the request.\n     */\n    public readonly xhr: XMLHttpRequest,\n    /**\n     * The request parameters used to make the HTTP request.\n     */\n    public readonly request: AjaxRequest,\n    /**\n     * The event type. This can be used to discern between different events\n     * if you're using progress events with {@link includeDownloadProgress} or\n     * {@link includeUploadProgress} settings in {@link AjaxConfig}.\n     *\n     * The event type consists of two parts: the {@link AjaxDirection} and the\n     * the event type. Merged with `_`, they form the `type` string. The\n     * direction can be an `upload` or a `download` direction, while an event can\n     * be `loadstart`, `progress` or `load`.\n     *\n     * `download_load` is the type of event when download has finished and the\n     * response is available.\n     */\n    public readonly type: AjaxResponseType = 'download_load'\n  ) {\n    const { status, responseType } = xhr;\n    this.status = status ?? 0;\n    this.responseType = responseType ?? '';\n\n    // Parse the response headers in advance for the user. There's really\n    // not a great way to get all of them. So we need to parse the header string\n    // we get back. It comes in a simple enough format:\n    //\n    // header-name: value here\n    // content-type: application/json\n    // other-header-here: some, other, values, or, whatever\n    const allHeaders = xhr.getAllResponseHeaders();\n    this.responseHeaders = allHeaders\n      ? // Split the header text into lines\n        allHeaders.split('\\n').reduce((headers: Record<string, string>, line) => {\n          // Split the lines on the first \": \" as\n          // \"key: value\". Note that the value could\n          // technically have a \": \" in it.\n          const index = line.indexOf(': ');\n          headers[line.slice(0, index)] = line.slice(index + 2);\n          return headers;\n        }, {})\n      : {};\n\n    this.response = getXHRResponse(xhr);\n    const { loaded, total } = originalEvent;\n    this.loaded = loaded;\n    this.total = total;\n  }\n}\n", "import { AjaxRequest } from './types';\nimport { getXHRResponse } from './getXHRResponse';\nimport { createErrorClass } from '../util/createErrorClass';\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport interface AjaxError extends Error {\n  /**\n   * The XHR instance associated with the error.\n   */\n  xhr: XMLHttpRequest;\n\n  /**\n   * The AjaxRequest associated with the error.\n   */\n  request: AjaxRequest;\n\n  /**\n   * The HTTP status code, if the request has completed. If not,\n   * it is set to `0`.\n   */\n  status: number;\n\n  /**\n   * The responseType (e.g. 'json', 'arraybuffer', or 'xml').\n   */\n  responseType: XMLHttpRequestResponseType;\n\n  /**\n   * The response data.\n   */\n  response: any;\n}\n\nexport interface AjaxErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string, xhr: XMLHttpRequest, request: AjaxRequest): AjaxError;\n}\n\n/**\n * Thrown when an error occurs during an AJAX request.\n * This is only exported because it is useful for checking to see if an error\n * is an `instanceof AjaxError`. DO NOT create new instances of `AjaxError` with\n * the constructor.\n *\n * @class AjaxError\n * @see {@link ajax}\n */\nexport const AjaxError: AjaxErrorCtor = createErrorClass(\n  (_super) =>\n    function AjaxErrorImpl(this: any, message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n      this.message = message;\n      this.name = 'AjaxError';\n      this.xhr = xhr;\n      this.request = request;\n      this.status = xhr.status;\n      this.responseType = xhr.responseType;\n      let response: any;\n      try {\n        // This can throw in IE, because we have to do a JSON.parse of\n        // the response in some cases to get the expected response property.\n        response = getXHRResponse(xhr);\n      } catch (err) {\n        response = xhr.responseText;\n      }\n      this.response = response;\n    }\n);\n\nexport interface AjaxTimeoutError extends AjaxError {}\n\nexport interface AjaxTimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (xhr: XMLHttpRequest, request: AjaxRequest): AjaxTimeoutError;\n}\n\n/**\n * Thrown when an AJAX request times out. Not to be confused with {@link TimeoutError}.\n *\n * This is exported only because it is useful for checking to see if errors are an\n * `instanceof AjaxTimeoutError`. DO NOT use the constructor to create an instance of\n * this type.\n *\n * @class AjaxTimeoutError\n * @see {@link ajax}\n */\nexport const AjaxTimeoutError: AjaxTimeoutErrorCtor = (() => {\n  function AjaxTimeoutErrorImpl(this: any, xhr: XMLHttpRequest, request: AjaxRequest) {\n    AjaxError.call(this, 'ajax timeout', xhr, request);\n    this.name = 'AjaxTimeoutError';\n    return this;\n  }\n  AjaxTimeoutErrorImpl.prototype = Object.create(AjaxError.prototype);\n  return AjaxTimeoutErrorImpl;\n})() as any;\n", "import { map } from '../operators/map';\nimport { Observable } from '../Observable';\nimport { AjaxConfig, AjaxRequest, AjaxDirection, ProgressEventType } from './types';\nimport { AjaxResponse } from './AjaxResponse';\nimport { AjaxTimeoutError, AjaxError } from './errors';\n\nexport interface AjaxCreationMethod {\n  /**\n   * Creates an observable that will perform an AJAX request using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default.\n   *\n   * This is the most configurable option, and the basis for all other AJAX calls in the library.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError, of } from 'rxjs';\n   *\n   * const obs$ = ajax({\n   *   method: 'GET',\n   *   url: 'https://api.github.com/users?per_page=5',\n   *   responseType: 'json'\n   * }).pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(config: AjaxConfig): Observable<AjaxResponse<T>>;\n\n  /**\n   * Perform an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope. Defaults to a `responseType` of `\"json\"`.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError, of } from 'rxjs';\n   *\n   * const obs$ = ajax('https://api.github.com/users?per_page=5').pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(url: string): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  get<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP POST using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  post<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PUT using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  put<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PATCH using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  patch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP DELETE using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  delete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and returns the hydrated JavaScript object from the\n   * response.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  getJSON<T>(url: string, headers?: Record<string, string>): Observable<T>;\n}\n\nfunction ajaxGet<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'GET', url, headers });\n}\n\nfunction ajaxPost<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'POST', url, body, headers });\n}\n\nfunction ajaxDelete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'DELETE', url, headers });\n}\n\nfunction ajaxPut<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PUT', url, body, headers });\n}\n\nfunction ajaxPatch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PATCH', url, body, headers });\n}\n\nconst mapResponse = map((x: AjaxResponse<any>) => x.response);\n\nfunction ajaxGetJSON<T>(url: string, headers?: Record<string, string>): Observable<T> {\n  return mapResponse(\n    ajax<T>({\n      method: 'GET',\n      url,\n      headers,\n    })\n  );\n}\n\n/**\n * There is an ajax operator on the Rx object.\n *\n * It creates an observable for an Ajax request with either a request object with\n * url, headers, etc or a string for a URL.\n *\n * ## Examples\n *\n * Using `ajax()` to fetch the response object that is being returned from API\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax('https://api.github.com/users?per_page=5').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax.getJSON()` to fetch data from API\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax.getJSON('https://api.github.com/users?per_page=5').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax()` with object as argument and method POST with a two seconds delay\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const users = ajax({\n *   url: 'https://httpbin.org/delay/2',\n *   method: 'POST',\n *   headers: {\n *     'Content-Type': 'application/json',\n *     'rxjs-custom-header': 'Rxjs'\n *   },\n *   body: {\n *     rxjs: 'Hello World!'\n *   }\n * }).pipe(\n *   map(response => console.log('response: ', response)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * users.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax()` to fetch. An error object that is being returned from the request\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax('https://api.github.com/404').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n */\nexport const ajax: AjaxCreationMethod = (() => {\n  const create = <T>(urlOrConfig: string | AjaxConfig) => {\n    const config: AjaxConfig =\n      typeof urlOrConfig === 'string'\n        ? {\n            url: urlOrConfig,\n          }\n        : urlOrConfig;\n    return fromAjax<T>(config);\n  };\n\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n\n  return create;\n})();\n\nconst UPLOAD = 'upload';\nconst DOWNLOAD = 'download';\nconst LOADSTART = 'loadstart';\nconst PROGRESS = 'progress';\nconst LOAD = 'load';\n\nexport function fromAjax<T>(init: AjaxConfig): Observable<AjaxResponse<T>> {\n  return new Observable((destination) => {\n    const config = {\n      // Defaults\n      async: true,\n      crossDomain: false,\n      withCredentials: false,\n      method: 'GET',\n      timeout: 0,\n      responseType: 'json' as XMLHttpRequestResponseType,\n\n      ...init,\n    };\n\n    const { queryParams, body: configuredBody, headers: configuredHeaders } = config;\n\n    let url = config.url;\n    if (!url) {\n      throw new TypeError('url is required');\n    }\n\n    if (queryParams) {\n      let searchParams: URLSearchParams;\n      if (url.includes('?')) {\n        // If the user has passed a URL with a querystring already in it,\n        // we need to combine them. So we're going to split it. There\n        // should only be one `?` in a valid URL.\n        const parts = url.split('?');\n        if (2 < parts.length) {\n          throw new TypeError('invalid url');\n        }\n        // Add the passed queryParams to the params already in the url provided.\n        searchParams = new URLSearchParams(parts[1]);\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        new URLSearchParams(queryParams as any).forEach((value, key) => searchParams.set(key, value));\n        // We have to do string concatenation here, because `new URL(url)` does\n        // not like relative URLs like `/this` without a base url, which we can't\n        // specify, nor can we assume `location` will exist, because of node.\n        url = parts[0] + '?' + searchParams;\n      } else {\n        // There is no preexisting querystring, so we can just use URLSearchParams\n        // to convert the passed queryParams into the proper format and encodings.\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        searchParams = new URLSearchParams(queryParams as any);\n        url = url + '?' + searchParams;\n      }\n    }\n\n    // Normalize the headers. We're going to make them all lowercase, since\n    // Headers are case insensitive by design. This makes it easier to verify\n    // that we aren't setting or sending duplicates.\n    const headers: Record<string, any> = {};\n    if (configuredHeaders) {\n      for (const key in configuredHeaders) {\n        if (configuredHeaders.hasOwnProperty(key)) {\n          headers[key.toLowerCase()] = configuredHeaders[key];\n        }\n      }\n    }\n\n    const crossDomain = config.crossDomain;\n\n    // Set the x-requested-with header. This is a non-standard header that has\n    // come to be a de facto standard for HTTP requests sent by libraries and frameworks\n    // using XHR. However, we DO NOT want to set this if it is a CORS request. This is\n    // because sometimes this header can cause issues with CORS. To be clear,\n    // None of this is necessary, it's only being set because it's \"the thing libraries do\"\n    // Starting back as far as JQuery, and continuing with other libraries such as Angular 1,\n    // Axios, et al.\n    if (!crossDomain && !('x-requested-with' in headers)) {\n      headers['x-requested-with'] = 'XMLHttpRequest';\n    }\n\n    // Allow users to provide their XSRF cookie name and the name of a custom header to use to\n    // send the cookie.\n    const { withCredentials, xsrfCookieName, xsrfHeaderName } = config;\n    if ((withCredentials || !crossDomain) && xsrfCookieName && xsrfHeaderName) {\n      const xsrfCookie = document?.cookie.match(new RegExp(`(^|;\\\\s*)(${xsrfCookieName})=([^;]*)`))?.pop() ?? '';\n      if (xsrfCookie) {\n        headers[xsrfHeaderName] = xsrfCookie;\n      }\n    }\n\n    // Examine the body and determine whether or not to serialize it\n    // and set the content-type in `headers`, if we're able.\n    const body = extractContentTypeAndMaybeSerializeBody(configuredBody, headers);\n\n    // The final request settings.\n    const _request: Readonly<AjaxRequest> = {\n      ...config,\n\n      // Set values we ensured above\n      url,\n      headers,\n      body,\n    };\n\n    let xhr: XMLHttpRequest;\n\n    // Create our XHR so we can get started.\n    xhr = init.createXHR ? init.createXHR() : new XMLHttpRequest();\n\n    {\n      ///////////////////////////////////////////////////\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      ///////////////////////////////////////////////////\n\n      const { progressSubscriber, includeDownloadProgress = false, includeUploadProgress = false } = init;\n\n      /**\n       * Wires up an event handler that will emit an error when fired. Used\n       * for timeout and abort events.\n       * @param type The type of event we're treating as an error\n       * @param errorFactory A function that creates the type of error to emit.\n       */\n      const addErrorEvent = (type: string, errorFactory: () => any) => {\n        xhr.addEventListener(type, () => {\n          const error = errorFactory();\n          progressSubscriber?.error?.(error);\n          destination.error(error);\n        });\n      };\n\n      // If the request times out, handle errors appropriately.\n      addErrorEvent('timeout', () => new AjaxTimeoutError(xhr, _request));\n\n      // If the request aborts (due to a network disconnection or the like), handle\n      // it as an error.\n      addErrorEvent('abort', () => new AjaxError('aborted', xhr, _request));\n\n      /**\n       * Creates a response object to emit to the consumer.\n       * @param direction the direction related to the event. Prefixes the event `type` in the\n       * `AjaxResponse` object with \"upload_\" for events related to uploading and \"download_\"\n       * for events related to downloading.\n       * @param event the actual event object.\n       */\n      const createResponse = (direction: AjaxDirection, event: ProgressEvent) =>\n        new AjaxResponse<T>(event, xhr, _request, `${direction}_${event.type as ProgressEventType}` as const);\n\n      /**\n       * Wires up an event handler that emits a Response object to the consumer, used for\n       * all events that emit responses, loadstart, progress, and load.\n       * Note that download load handling is a bit different below, because it has\n       * more logic it needs to run.\n       * @param target The target, either the XHR itself or the Upload object.\n       * @param type The type of event to wire up\n       * @param direction The \"direction\", used to prefix the response object that is\n       * emitted to the consumer. (e.g. \"upload_\" or \"download_\")\n       */\n      const addProgressEvent = (target: any, type: string, direction: AjaxDirection) => {\n        target.addEventListener(type, (event: ProgressEvent) => {\n          destination.next(createResponse(direction, event));\n        });\n      };\n\n      if (includeUploadProgress) {\n        [LOADSTART, PROGRESS, LOAD].forEach((type) => addProgressEvent(xhr.upload, type, UPLOAD));\n      }\n\n      if (progressSubscriber) {\n        [LOADSTART, PROGRESS].forEach((type) => xhr.upload.addEventListener(type, (e: any) => progressSubscriber?.next?.(e)));\n      }\n\n      if (includeDownloadProgress) {\n        [LOADSTART, PROGRESS].forEach((type) => addProgressEvent(xhr, type, DOWNLOAD));\n      }\n\n      const emitError = (status?: number) => {\n        const msg = 'ajax error' + (status ? ' ' + status : '');\n        destination.error(new AjaxError(msg, xhr, _request));\n      };\n\n      xhr.addEventListener('error', (e) => {\n        progressSubscriber?.error?.(e);\n        emitError();\n      });\n\n      xhr.addEventListener(LOAD, (event) => {\n        const { status } = xhr;\n        // 4xx and 5xx should error (https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n        if (status < 400) {\n          progressSubscriber?.complete?.();\n\n          let response: AjaxResponse<T>;\n          try {\n            // This can throw in IE, because we end up needing to do a JSON.parse\n            // of the response in some cases to produce object we'd expect from\n            // modern browsers.\n            response = createResponse(DOWNLOAD, event);\n          } catch (err) {\n            destination.error(err);\n            return;\n          }\n\n          destination.next(response);\n          destination.complete();\n        } else {\n          progressSubscriber?.error?.(event);\n          emitError(status);\n        }\n      });\n    }\n\n    const { user, method, async } = _request;\n    // open XHR\n    if (user) {\n      xhr.open(method, url, async, user, _request.password);\n    } else {\n      xhr.open(method, url, async);\n    }\n\n    // timeout, responseType and withCredentials can be set once the XHR is open\n    if (async) {\n      xhr.timeout = _request.timeout;\n      xhr.responseType = _request.responseType;\n    }\n\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = _request.withCredentials;\n    }\n\n    // set headers\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    // finally send the request\n    if (body) {\n      xhr.send(body);\n    } else {\n      xhr.send();\n    }\n\n    return () => {\n      if (xhr && xhr.readyState !== 4 /*XHR done*/) {\n        xhr.abort();\n      }\n    };\n  });\n}\n\n/**\n * Examines the body to determine if we need to serialize it for them or not.\n * If the body is a type that XHR handles natively, we just allow it through,\n * otherwise, if the body is something that *we* can serialize for the user,\n * we will serialize it, and attempt to set the `content-type` header, if it's\n * not already set.\n * @param body The body passed in by the user\n * @param headers The normalized headers\n */\nfunction extractContentTypeAndMaybeSerializeBody(body: any, headers: Record<string, string>) {\n  if (\n    !body ||\n    typeof body === 'string' ||\n    isFormData(body) ||\n    isURLSearchParams(body) ||\n    isArrayBuffer(body) ||\n    isFile(body) ||\n    isBlob(body) ||\n    isReadableStream(body)\n  ) {\n    // The XHR instance itself can handle serializing these, and set the content-type for us\n    // so we don't need to do that. https://xhr.spec.whatwg.org/#the-send()-method\n    return body;\n  }\n\n  if (isArrayBufferView(body)) {\n    // This is a typed array (e.g. Float32Array or Uint8Array), or a DataView.\n    // XHR can handle this one too: https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n    return body.buffer;\n  }\n\n  if (typeof body === 'object') {\n    // If we have made it here, this is an object, probably a POJO, and we'll try\n    // to serialize it for them. If this doesn't work, it will throw, obviously, which\n    // is okay. The workaround for users would be to manually set the body to their own\n    // serialized string (accounting for circular references or whatever), then set\n    // the content-type manually as well.\n    headers['content-type'] = headers['content-type'] ?? 'application/json;charset=utf-8';\n    return JSON.stringify(body);\n  }\n\n  // If we've gotten past everything above, this is something we don't quite know how to\n  // handle. Throw an error. This will be caught and emitted from the observable.\n  throw new TypeError('Unknown body type');\n}\n\nconst _toString = Object.prototype.toString;\n\nfunction toStringCheck(obj: any, name: string): boolean {\n  return _toString.call(obj) === `[object ${name}]`;\n}\n\nfunction isArrayBuffer(body: any): body is ArrayBuffer {\n  return toStringCheck(body, 'ArrayBuffer');\n}\n\nfunction isFile(body: any): body is File {\n  return toStringCheck(body, 'File');\n}\n\nfunction isBlob(body: any): body is Blob {\n  return toStringCheck(body, 'Blob');\n}\n\nfunction isArrayBufferView(body: any): body is ArrayBufferView {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(body);\n}\n\nfunction isFormData(body: any): body is FormData {\n  return typeof FormData !== 'undefined' && body instanceof FormData;\n}\n\nfunction isURLSearchParams(body: any): body is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams;\n}\n\nfunction isReadableStream(body: any): body is ReadableStream {\n  return typeof ReadableStream !== 'undefined' && body instanceof ReadableStream;\n}\n"],
  "mappings": "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",
  "names": ["AjaxResponse", "key", "_a", "_b"]
}
